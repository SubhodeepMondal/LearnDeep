#include "LinearAlgebraFixtures.unit.hpp"
#include <gtest/gtest.h>
#include <tensor.h>

TEST_F(MathTest, Eager_MatrixSubtraction_2D) {

  std::float64_t a[] = {0.37454012, 0.95071431, 0.73199394, 0.59865848,
                        0.15601864, 0.15599452, 0.05808361, 0.86617615,
                        0.60111501, 0.70807258, 0.02058449, 0.96990985,
                        0.83244264, 0.21233911, 0.18182497, 0.18340451};

  std::float64_t b[] = {0.30424224, 0.52475643, 0.43194502, 0.29122914,
                        0.61185289, 0.13949386, 0.29214465, 0.36636184,
                        0.45606998, 0.78517596, 0.19967378, 0.51423444,
                        0.59241457, 0.04645041, 0.60754485, 0.17052412};

  std::float64_t c_sub[] = {0.07029788,  0.42595787,  0.30004892,  0.30742934,
                            -0.45583425, 0.01650066,  -0.23406104, 0.4998143,
                            0.14504503,  -0.07710338, -0.17908929, 0.45567541,
                            0.24002807,  0.1658887,   -0.42571988, 0.01288039};

  tf::tensor A, B, C;
  A.tf_create(tf_float64, 4, 4);
  B.tf_create(tf_float64, 4, 4);

  A.tensor_of(a);
  B.tensor_of(b);

  C = A.sub(B);

  auto *tensorC_matmul = static_cast<Tensor<std::float64_t> *>(C.ptr);
  for (int i = 0; i < 16; i++) {
    EXPECT_NEAR(C.getPtr()[i], c_sub[i], 0.0001);
  }
}

TEST_F(MathTest, MatrixSubtraction_2D) {

  std::float64_t a[] = {0.37454012, 0.95071431, 0.73199394, 0.59865848,
                        0.15601864, 0.15599452, 0.05808361, 0.86617615,
                        0.60111501, 0.70807258, 0.02058449, 0.96990985,
                        0.83244264, 0.21233911, 0.18182497, 0.18340451};

  std::float64_t b[] = {0.30424224, 0.52475643, 0.43194502, 0.29122914,
                        0.61185289, 0.13949386, 0.29214465, 0.36636184,
                        0.45606998, 0.78517596, 0.19967378, 0.51423444,
                        0.59241457, 0.04645041, 0.60754485, 0.17052412};

  std::float64_t c_sub[] = {0.07029788,  0.42595787,  0.30004892,  0.30742934,
                            -0.45583425, 0.01650066,  -0.23406104, 0.4998143,
                            0.14504503,  -0.07710338, -0.17908929, 0.45567541,
                            0.24002807,  0.1658887,   -0.42571988, 0.01288039};

  tf::tensor A, B, C, D;
  A.tf_create(tf_float64, 4, 4);
  B.tf_create(tf_float64, 4, 4);
  C.tf_create(tf_float64, 4, 4);

  A.tensor_of(a);
  B.tensor_of(b);

  tf::graph g_sub;
  g_sub.tf_create_graph();

  C = A.sub(g_sub, B);

  g_sub.graph_execute();
  g_sub.graph_clear();

  auto *tensorC_sub = static_cast<Tensor<std::float64_t> *>(C.ptr);
  for (int i = 0; i < 16; i++) {
    EXPECT_NEAR(tensorC_sub->getData()[i], c_sub[i], 0.0001);
  }
}
